analyse_besoins:
  description: >
    Identifier le type d'application à générer, le public cible et les fonctionnalités principales à partir des paramètres suivants :
    - Type d'application : {{ app_type }}
    - Public cible : {{ cible }}
    - Résumé de l'idée : {{ resume }}
    Fournir une analyse cohérente avec les tendances actuelles du marché.
  expected_output: >
    Spécification des besoins utilisateurs, type d'application, public cible, fonctionnalités clés.
 

collecte_donnees:
  description: >
    Extraire et organiser les informations utiles depuis des sources externes telles que des documents, images ou sites web, en lien avec le projet {{ nom_projet }}.
  expected_output: >
    Données brutes classées par pertinence, prêtes pour l'analyse.
  

analyse_donnees:
  description: >
    Interpréter les données collectées pour guider la conception, la stratégie et les fonctionnalités de l'application {{ nom_projet }}.
  expected_output: >
    Rapport analytique incluant tendances, corrélations et opportunités.
  

redaction_contenu:
  description: >
    Générer du contenu technique et marketing pour l'application {{ nom_projet }}, en adoptant un ton adapté au public {{ cible }}.
    Utiliser le résumé fourni : "{{ resume }}"
  expected_output: >
    Contenus textuels (README, pages marketing, descriptions fonctionnelles).
  

developpement_app:
  description: >
    Générer automatiquement le code source pour l'application {{ nom_projet }} (type : {{ app_type }}), à partir des spécifications fonctionnelles définies.
  expected_output: >
    Code source fonctionnel, structuré, documenté et prêt au déploiement.
  

traduction:
  description: >
    Traduire les contenus générés dans la langue sélectionnée par l'utilisateur : {{ langue }}.
    Ne produire qu'une seule version localisée.
  expected_output: >
    Version localisée des textes en {{ langue }} uniquement.
  

verification_logique:
  description: >
    Vérifier que toutes les décisions prises dans le projet {{ nom_projet }} sont logiques, cohérentes et respectent les objectifs définis dans l'analyse des besoins.
  expected_output: >
    Rapport de validation indiquant les choix approuvés ou à revoir.

conception_crew_specialise:
  description: >
    À partir de la description d'un projet (type, objectifs, cible), conçois un nouveau Crew autonome pour le réaliser.
    Décris les agents nécessaires (rôle, objectif, backstory), ainsi que les tâches associées (description, résultats attendus, lien agent/tâche).
    Génère ensuite un fichier agents.yaml et un fichier tasks.yaml dans un sous-dossier nommé d'après le projet.
  expected_output: >
    Un fichier markdown contenant deux blocs de code YAML clairement séparés :

    - Le premier bloc doit commencer par `agents:` et inclure un dictionnaire imbriqué `agents` contenant tous les agents. Exemple :
      ```yaml
        agents:
          redacteur:
            name: > Alice
            role: > Rédactrice
            backstory: > ...
            skills: > ["écriture", "synthèse"]
      ```

    - Le second bloc doit commencer par `tasks:` et inclure un dictionnaire imbriqué `tasks` contenant toutes les tâches. Exemple :
      ```yaml
        tasks:
          redaction_contenu:
            description: > Rédiger le contenu
            expected_output: > Texte complet
            agent: redacteur
      ```

    Ces blocs YAML doivent être valides et lisibles avec `yaml.safe_load()`. Évite toute description textuelle hors de ces blocs.

    
reporting_task:
  description: >
    Review the context you got and expand each topic into a full section for a report.
    Make sure the report is detailed and contains any and all relevant information.
  expected_output: >
    A fully fledge reports with the mains topics, each with a full section of information.
    Formatted as markdown without triple backticks (```).
  agent: reporting_analyst
  output_file: report.md


